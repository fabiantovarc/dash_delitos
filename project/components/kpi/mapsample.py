# ðŸ“Œ Importamos las librerÃ­as necesarias
from dash import html, dcc  # Componentes de Dash para la interfaz web
import plotly.express as px  # LibrerÃ­a para crear grÃ¡ficos interactivos con Plotly

# ðŸ“Œ Definimos la clase `mapsample`, que representa un mapa interactivo de elecciones de Montreal
class mapsample:    
    """ 
    Una clase para representar un mapa interactivo de elecciones de Montreal usando Dash y Plotly.
    """

    def __init__(self, map_title: str, ID: str):
        """
        Constructor de la clase `mapsample`. 
        Inicializa los atributos del mapa, como el tÃ­tulo y el identificador Ãºnico del div HTML.

        Args:
            map_title (str): TÃ­tulo del mapa.
            ID (str): Identificador Ãºnico del contenedor `div`, usado en callbacks y CSS.
        
        MÃ©todos:
            display()
                Genera la estructura HTML del mapa interactivo utilizando Plotly Express.

                Returns:
                    html.Div: Contenedor `Div` con un grÃ¡fico interactivo `dcc.Graph()`.
        """
        
        # ðŸ“Œ Se asignan los valores a los atributos de la clase
        self.map_title = map_title  # TÃ­tulo que se mostrarÃ¡ sobre el mapa
        self.id = ID  # Identificador Ãºnico del contenedor HTML del mapa

    @staticmethod
    def figura():
        """
        MÃ©todo estÃ¡tico que genera un grÃ¡fico de mapa coroplÃ©tico basado en los datos de elecciones de Montreal.

        Returns:
            fig (plotly.graph_objects.Figure): Figura de Plotly con el mapa interactivo.
        """

        # ðŸ“Œ Cargamos un conjunto de datos de ejemplo proporcionado por Plotly
        df = px.data.election()  # Datos de elecciones de Montreal

        # ðŸ“Œ Cargamos el archivo GeoJSON que contiene los lÃ­mites geogrÃ¡ficos de los distritos electorales
        geojson = px.data.election_geojson()

        # ðŸ“Œ Creamos un mapa coroplÃ©tico utilizando los datos de elecciones
        fig = px.choropleth(
            df, 
            geojson=geojson, 
            color="Bergeron",  # ðŸ“Œ Se usa el color segÃºn los votos para el candidato "Bergeron"
            locations="district",  # ðŸ“Œ Se vinculan los datos de los distritos con el GeoJSON
            featureidkey="properties.district",  # ðŸ“Œ Se especifica la clave de los distritos en el GeoJSON
            projection="mercator"  # ðŸ“Œ Usamos la proyecciÃ³n Mercator para el mapa
        )

        # ðŸ“Œ Ajustamos el mapa para que se enfoque en los distritos sin mostrar bordes adicionales
        fig.update_geos(fitbounds="locations", visible=False)

        # ðŸ“Œ Eliminamos los mÃ¡rgenes para que el grÃ¡fico ocupe todo el espacio disponible
        fig.update_layout(margin={"r": 0, "t": 0, "l": 0, "b": 0})

        # ðŸ“Œ Retornamos el grÃ¡fico generado
        return fig

    def display(self):
        """
        MÃ©todo que genera el layout de Dash con el mapa interactivo.

        Returns:
            html.Div: Un contenedor `Div` que incluye el tÃ­tulo y el grÃ¡fico `dcc.Graph()`.
        """

        # ðŸ“Œ Creamos un contenedor `Div` que contendrÃ¡ el mapa
        layout = html.Div(
            [
                # ðŸ“Œ Agregamos un tÃ­tulo con el nombre del mapa
                html.H4([self.map_title]),  

                # ðŸ“Œ Contenedor interno que contiene el grÃ¡fico interactivo
                html.Div([
                    dcc.Graph(figure=self.figura())  # ðŸ“Œ Se inserta la figura generada por `figura()`
                ])
                
            ], id=self.id  # ðŸ“Œ Asignamos un identificador Ãºnico al contenedor principal
        )

        # ðŸ“Œ Retornamos la estructura HTML generada
        return layout
